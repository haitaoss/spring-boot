pluginManagement {
	repositories {
		mavenLocal()
		// 从 https://developer.aliyun.com/mvn/guide 找的
		maven { "central"; url "https://maven.aliyun.com/repository/central"}
		maven { "jcenter"; url "https://maven.aliyun.com/nexus/content/repositories/jcenter"}
		maven { "public"; url "https://maven.aliyun.com/repository/public"}
		maven { "google"; url "https://maven.aliyun.com/repository/google"}
		maven { "gradle-plugin"; url "https://maven.aliyun.com/repository/gradle-plugin"}
		maven { "spring"; url "https://maven.aliyun.com/repository/spring"}
		maven { "spring-plugin"; url "https://maven.aliyun.com/repository/spring-plugin"}
		maven { "grails-core"; url "https://maven.aliyun.com/repository/grails-core"}
		maven { "apache snapshots"; url "https://maven.aliyun.com/repository/apache-snapshots"}

		mavenCentral()
		gradlePluginPortal()
	}
	resolutionStrategy {
		eachPlugin {
			if (requested.id.id == "org.jetbrains.kotlin.jvm") {
				useVersion "${kotlinVersion}"
			}
			if (requested.id.id == "org.jetbrains.kotlin.plugin.spring") {
				useVersion "${kotlinVersion}"
			}
		}
	}
}

plugins {
	id "com.gradle.enterprise" version "3.12.1"
	id "io.spring.ge.conventions" version "0.0.13"
}

dependencyResolutionManagement {
	repositories {
		mavenLocal()
		// 从 https://developer.aliyun.com/mvn/guide 找的
		maven { "central"; url "https://maven.aliyun.com/repository/central"}
		maven { "jcenter"; url "https://maven.aliyun.com/nexus/content/repositories/jcenter"}
		maven { "public"; url "https://maven.aliyun.com/repository/public"}
		maven { "google"; url "https://maven.aliyun.com/repository/google"}
		maven { "gradle-plugin"; url "https://maven.aliyun.com/repository/gradle-plugin"}
		maven { "spring"; url "https://maven.aliyun.com/repository/spring"}
		maven { "spring-plugin"; url "https://maven.aliyun.com/repository/spring-plugin"}
		maven { "grails-core"; url "https://maven.aliyun.com/repository/grails-core"}
		maven { "apache snapshots"; url "https://maven.aliyun.com/repository/apache-snapshots"}

		mavenCentral()
		gradlePluginPortal()
	}
}

rootProject.name="spring-boot-build"

settings.gradle.projectsLoaded {
	gradleEnterprise {
		buildScan {
			def toolchainVersion = settings.gradle.rootProject.findProperty('toolchainVersion')
			if (toolchainVersion != null) {
				value('Toolchain version', toolchainVersion)
				tag("JDK-$toolchainVersion")
			}
			def buildDir = settings.gradle.rootProject.getBuildDir()
			buildDir.mkdirs()
			new File(buildDir, "build-scan-uri.txt").text = "build scan not generated"
			buildScanPublished { scan ->
				buildDir.mkdirs()
				new File(buildDir, "build-scan-uri.txt").text = "<${scan.buildScanUri}|build scan>\n"
			}
		}
	}
}

include "spring-boot-project:spring-boot-dependencies"
include "spring-boot-project:spring-boot-parent"
include "spring-boot-project:spring-boot-tools:spring-boot-antlib"
include "spring-boot-project:spring-boot-tools:spring-boot-autoconfigure-processor"
include "spring-boot-project:spring-boot-tools:spring-boot-buildpack-platform"
include "spring-boot-project:spring-boot-tools:spring-boot-configuration-metadata"
include "spring-boot-project:spring-boot-tools:spring-boot-configuration-processor"
include "spring-boot-project:spring-boot-tools:spring-boot-gradle-plugin"
include "spring-boot-project:spring-boot-tools:spring-boot-gradle-test-support"
include "spring-boot-project:spring-boot-tools:spring-boot-jarmode-layertools"
include "spring-boot-project:spring-boot-tools:spring-boot-loader"
include "spring-boot-project:spring-boot-tools:spring-boot-loader-tools"
include "spring-boot-project:spring-boot-tools:spring-boot-maven-plugin"
include "spring-boot-project:spring-boot-tools:spring-boot-test-support"
include "spring-boot-project:spring-boot"
include "spring-boot-project:spring-boot-autoconfigure"
include "spring-boot-project:spring-boot-actuator"
include "spring-boot-project:spring-boot-actuator-autoconfigure"
include "spring-boot-project:spring-boot-cli"
include "spring-boot-project:spring-boot-devtools"
include "spring-boot-project:spring-boot-docs"
include "spring-boot-project:spring-boot-properties-migrator"
include "spring-boot-project:spring-boot-test"
include "spring-boot-project:spring-boot-test-autoconfigure"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-configuration-processor-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-launch-script-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-loader-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-server-tests"
include "spring-boot-system-tests:spring-boot-deployment-tests"
include "spring-boot-system-tests:spring-boot-image-tests"

file("${rootDir}/spring-boot-project/spring-boot-starters").eachDirMatch(~/spring-boot-starter.*/) {
	include "spring-boot-project:spring-boot-starters:${it.name}"
}

file("${rootDir}/spring-boot-tests/spring-boot-smoke-tests").eachDirMatch(~/spring-boot-smoke-test.*/) {
	include "spring-boot-tests:spring-boot-smoke-tests:${it.name}"
}
include 'source-note-springboot'

gradle.startParameter.excludedTaskNames.addAll(['checkFormatMain',
												'checkFormatTest',
												'checkstyleMain',
												'checkstyleTest',
												'asciidoctor',
												'asciidoctorPdf',
												'publishMavenPublicationToProjectRepository',
												'zip',
												'test'])